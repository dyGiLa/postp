import pandas as pd
import numpy as np

import sys
sys.path.append("/home/heidi/Documents/SCC-GL-calculator")
import Module_GLSCC_calculator as sc

import matplotlib.pyplot as plt

# >>>>>>>>>>>>>>>             README, pls          <<<<<<<<<<<<<<< #

'''This script is used for vatulazation the stats/*csv files 

generated by dyGiLa phaseCounting() func.
''' 

# >>>>>>>>>>>>> load the *csv files into numpy array <<<<<<<<<<<<< #

measureData_00mT_tauQ50 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ50/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ150 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ150/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ250 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ250/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ350 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ350/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ450 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ450/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ550 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ550/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ650 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ650/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ750 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ750/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ850 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ850/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ950 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ950/stats/phaseVolume-stream.csv', sep=",")

measureData_00mT_tauQ1050 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ1050/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ1150 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ1150/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ1250 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ1250/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ1350 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ1350/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ1450 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ1450/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ1550 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ1550/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ1650 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ1650/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ1750 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ1750/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ1850 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ1850/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ1950 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ1950/stats/phaseVolume-stream.csv', sep=",")

measureData_00mT_tauQ2050 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ2050/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ2150 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ2150/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ2250 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ2250/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ2350 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ2350/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ2450 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ2450/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ2550 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ2550/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ2650 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ2650/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ2750 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ2750/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ2850 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ2850/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ2950 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ2950/stats/phaseVolume-stream.csv', sep=",")

measureData_00mT_tauQ3050 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ3050/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ3150 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ3150/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ3250 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ3250/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ3350 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ3350/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ3450 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ3450/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ3550 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ3550/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ3650 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ3650/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ3750 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ3750/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ3850 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ3850/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ3950 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ3950/stats/phaseVolume-stream.csv', sep=",")

measureData_00mT_tauQ4050 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ4050/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ4150 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ4150/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ4250 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ4250/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ4350 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ4350/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ4450 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ4450/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ4550 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ4550/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ4650 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ4650/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ4750 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ4750/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ4850 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ4850/stats/phaseVolume-stream.csv', sep=",")
measureData_00mT_tauQ4950 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ4950/stats/phaseVolume-stream.csv', sep=",")

measureData_00mT_tauQ5050 = pd.read_csv('/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL/p-23.0-tauQ5050/stats/phaseVolume-stream.csv', sep=",")



# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>   parampeters definations  <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

p = 23 # bar
Tcp = sc.Tcp_mK(p) # mK at 26 bar

LineWidth=3.5
zeroTol = 6e-2

# plot line color
lineColors = [
    (0.121, 0.466, 0.705),  # Blue
    (1.000, 0.498, 0.054),  # Orange
    (0.172, 0.627, 0.172),  # Green
    (0.839, 0.153, 0.157),  # Red
    (0.580, 0.404, 0.741),  # Purple
    (0.549, 0.337, 0.294),   # Brown
    (0.05, 0.05, 0.20)      # Dark Navy
]

# line styles
line_styles = ['-', '--', ':', '-.', (0, (5, 10)), (0, (3, 2, 1, 2, 1, 2)) ]

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>> Check the first few rows (optional) <<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

df = measureData_00mT_tauQ150
print(df.head())
print(f"df.colums : ", df.columns)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>    Tempratue profile plot  <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

fig1, ax1 = plt.subplots(1,1);

# for r in range(0, row, 30):
    
#     ax1.plot(gaps_A[r,1]*np.linspace(0.,1.,col-2), gaps_A[r,2:],'-', label="A: {} bar".format(gaps_A[r,0]))
#     ax1.plot(gaps_B[r,1]*np.linspace(0.,1.,col-2), gaps_B[r,2:],'--', label="B: {} bar".format(gaps_B[r,0]))

#ax1.plot(measureData_00mT_tauQ125.values[:,0], measureData_00mT_tauQ125.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
ax1.plot(df['t'], df['T_000Q']/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,\tau_{Q}=750t_{GL}}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ150.values[:,0], measureData_00mT_tauQ150.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=150t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ250.values[:,0], measureData_00mT_tauQ250.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=250t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ350.values[:,0], measureData_00mT_tauQ350.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=350t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ450.values[:,0], measureData_00mT_tauQ450.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ550.values[:,0], measureData_00mT_tauQ550.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 1.0, 0.0))
# ax1.plot(measureData_00mT_tauQ650.values[:,0], measureData_00mT_tauQ650.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 1.0, 0.0))
# ax1.plot(measureData_00mT_tauQ750.values[:,0], measureData_00mT_tauQ750.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 1.0, 0.0))
# ax1.plot(measureData_00mT_tauQ850.values[:,0], measureData_00mT_tauQ850.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 1.0, 0.0))
# ax1.plot(measureData_00mT_tauQ950.values[:,0], measureData_00mT_tauQ950.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 1.0, 0.0))

# ax1.plot(measureData_00mT_tauQ1050.values[:,0], measureData_00mT_tauQ1050.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ1150.values[:,0], measureData_00mT_tauQ1150.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ1250.values[:,0], measureData_00mT_tauQ1250.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ1350.values[:,0], measureData_00mT_tauQ1350.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ1450.values[:,0], measureData_00mT_tauQ1450.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ1550.values[:,0], measureData_00mT_tauQ1550.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ1650.values[:,0], measureData_00mT_tauQ1650.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ1750.values[:,0], measureData_00mT_tauQ1750.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ1850.values[:,0], measureData_00mT_tauQ1850.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ1950.values[:,0], measureData_00mT_tauQ1950.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))

# ax1.plot(measureData_00mT_tauQ2050.values[:,0], measureData_00mT_tauQ2050.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ2150.values[:,0], measureData_00mT_tauQ2150.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ2250.values[:,0], measureData_00mT_tauQ2250.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ2350.values[:,0], measureData_00mT_tauQ2350.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ2450.values[:,0], measureData_00mT_tauQ2450.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ2550.values[:,0], measureData_00mT_tauQ2550.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ2650.values[:,0], measureData_00mT_tauQ2650.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ2750.values[:,0], measureData_00mT_tauQ2750.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ2850.values[:,0], measureData_00mT_tauQ2850.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_00mT_tauQ2950.values[:,0], measureData_00mT_tauQ2950.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))

# ax1.plot(measureData_00mT_tauQ3050.values[:,0], measureData_00mT_tauQ3050.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='solid', color=(0, 0, 1.0))

# ax1.plot(measureData_relexingt1750d.values[:,0], measureData_relexingt1750d.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=125t^{0}_{GL}$', linestyle='solid', color=(1.0, 0.5, 0.1))
# ax1.plot(measureData_relexingt1750c.values[:,0], measureData_relexingt1750c.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=250t^{0}_{GL}$', linestyle='solid', color=(0, 0.6, 0.6))
# ax1.plot(measureData_relexingt1750b.values[:,0], measureData_relexingt1750b.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=500t^{0}_{GL}$', linestyle='solid', color=(0, 1.0, 0.0))

ax1.set_xlabel(r'$t/t^{0}_{GL}$',fontsize = 22.0)
#ax1.set_ylabel(r'$\Delta_{A(B)}/k_{b}T_{c}(p)$',fontsize = 18.0)
ax1.set_ylabel(r'$T/T_{c}(p)$',fontsize = 22.0)
ax1.tick_params(axis='both', which='major', labelsize=30)
ax1.legend(prop={'size': 18}, bbox_to_anchor=(1.54, 1.0), loc='upper right')
ax1.grid(True)

# fig1.tight_layout()

# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# # >>>>>>>>>>>>>     phase Marker plot      <<<<<<<<<<<<<<< #
# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

fig2, ax2 = plt.subplots(1,1,figsize=(12, 7));

ax2.plot(df["t"], df["Vratio_p5_acc"], linewidth=LineWidth, label=r'$p_{B}\,,\tau_{Q}=750t_{GL}$', linestyle=line_styles[0], color=lineColors[0])

ax2.plot(df["t"], df["Vratio_p9_acc"], linewidth=LineWidth, label=r'$p_{A}\,,\tau_{Q}=750t_{GL}$', linestyle=line_styles[0], color=lineColors[1])

ax2.plot(df["t"], df["Vratio_p3_acc"], linewidth=LineWidth, label=r'$p_{planar}\,,\tau_{Q}=750t_{GL}$', linestyle=line_styles[1], color=lineColors[2])

ax2.plot(df["t"], df["Vratio_p7_acc"], linewidth=LineWidth, label=r'$p_{P}\,,\tau_{Q}=750t_{GL}$', linestyle=line_styles[2], color=lineColors[3])

ax2.plot(df["t"], df["Vratio_p8_acc"], linewidth=LineWidth, label=r'$p_{bi}\,,\tau_{Q}=750t_{GL}$', linestyle=line_styles[4], color=lineColors[4])

ax2.plot(df["t"], df["Vratio_p1_acc"], linewidth=LineWidth, label=r'$p_{AB}\,,\tau_{Q}=750t_{GL}$', linestyle=line_styles[5], color=lineColors[6])


# #measureData_00mT_tauQ50.values[:,2][np.where(measureData_00mT_tauQ50.values[:,2] <= 1e-1)]

# index_join_normal_sf = np.where(measureData_00mT_tauQ50.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax2.plot(measureData_00mT_tauQ50.values[:,0], np.concatenate((measureData_00mT_tauQ50.values[0:index_join_normal_sf,2], measureData_00mT_tauQ50.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,\tau_{Q}=50t_{GL}$', linestyle='dashdot', color=(0.0, 0, 1.0))

# index_join_normal_sf = np.where(measureData_00mT_tauQ150.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax2.plot(measureData_00mT_tauQ150.values[:,0], np.concatenate((measureData_00mT_tauQ150.values[0:index_join_normal_sf,2], measureData_00mT_tauQ150.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,\tau_{Q}=150t_{GL}$', linestyle='dashdot', color=(0, 1.0, 0.0))

# index_join_normal_sf = np.where(measureData_00mT_tauQ250.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax2.plot(measureData_00mT_tauQ250.values[:,0], np.concatenate((measureData_00mT_tauQ250.values[0:index_join_normal_sf,2], measureData_00mT_tauQ250.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,\tau_{Q}=250t_{GL}$', linestyle='dashdot', color=(1.0, 0, 0.0))

# index_join_normal_sf = np.where(measureData_00mT_tauQ350.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax2.plot(measureData_00mT_tauQ350.values[:,0], np.concatenate((measureData_00mT_tauQ350.values[0:index_join_normal_sf,2], measureData_00mT_tauQ350.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,\tau_{Q}=350t_{GL}$', linestyle='dashdot', color=(0.5, 0, 1.0))

# index_join_normal_sf = np.where(measureData_00mT_tauQ450.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax2.plot(measureData_00mT_tauQ450.values[:,0], np.concatenate((measureData_00mT_tauQ450.values[0:index_join_normal_sf,2], measureData_00mT_tauQ450.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,\tau_{Q}=450t_{GL}$', linestyle='dashdot', color=(0.7, 0.6, 0.0))
# # ax2.plot(measureData_00mT_tauQ550.values[:,0], np.concatenate((measureData_00mT_tauQ550.values[0:index_join_normal_sf,2], measureData_00mT_tauQ550.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 1.0, 0.0))
# # ax2.plot(measureData_00mT_tauQ650.values[:,0], np.concatenate((measureData_00mT_tauQ650.values[0:index_join_normal_sf,2], measureData_00mT_tauQ650.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 1.0, 0.0))
# # ax2.plot(measureData_00mT_tauQ750.values[:,0], np.concatenate((measureData_00mT_tauQ750.values[0:index_join_normal_sf,2], measureData_00mT_tauQ750.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 1.0, 0.0))
# # ax2.plot(measureData_00mT_tauQ850.values[:,0], np.concatenate((measureData_00mT_tauQ850.values[0:index_join_normal_sf,2], measureData_00mT_tauQ850.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 1.0, 0.0))
# # ax2.plot(measureData_00mT_tauQ950.values[:,0], np.concatenate((measureData_00mT_tauQ950.values[0:index_join_normal_sf,2], measureData_00mT_tauQ950.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 1.0, 0.0))

# # ax2.plot(measureData_00mT_tauQ1050.values[:,0], np.concatenate((measureData_00mT_tauQ1050.values[0:index_join_normal_sf,2], measureData_00mT_tauQ1050.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ1150.values[:,0], np.concatenate((measureData_00mT_tauQ1150.values[0:index_join_normal_sf,2], measureData_00mT_tauQ1150.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ1250.values[:,0], np.concatenate((measureData_00mT_tauQ1250.values[0:index_join_normal_sf,2], measureData_00mT_tauQ1250.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ1350.values[:,0], np.concatenate((measureData_00mT_tauQ1350.values[0:index_join_normal_sf,2], measureData_00mT_tauQ1350.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ1450.values[:,0], np.concatenate((measureData_00mT_tauQ1450.values[0:index_join_normal_sf,2], measureData_00mT_tauQ1450.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ1550.values[:,0], np.concatenate((measureData_00mT_tauQ1550.values[0:index_join_normal_sf,2], measureData_00mT_tauQ1550.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ1650.values[:,0], np.concatenate((measureData_00mT_tauQ1650.values[0:index_join_normal_sf,2], measureData_00mT_tauQ1650.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ1750.values[:,0], np.concatenate((measureData_00mT_tauQ1750.values[0:index_join_normal_sf,2], measureData_00mT_tauQ1750.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ1850.values[:,0], np.concatenate((measureData_00mT_tauQ1850.values[0:index_join_normal_sf,2], measureData_00mT_tauQ1850.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ1950.values[:,0], np.concatenate((measureData_00mT_tauQ1950.values[0:index_join_normal_sf,2], measureData_00mT_tauQ1950.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))

# # ax2.plot(measureData_00mT_tauQ2050.values[:,0], np.concatenate((measureData_00mT_tauQ2050.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2050.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ2150.values[:,0], np.concatenate((measureData_00mT_tauQ2150.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2150.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ2250.values[:,0], np.concatenate((measureData_00mT_tauQ2250.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2250.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ2350.values[:,0], np.concatenate((measureData_00mT_tauQ2350.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2350.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ2450.values[:,0], np.concatenate((measureData_00mT_tauQ2450.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2450.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ2550.values[:,0], np.concatenate((measureData_00mT_tauQ2550.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2550.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ2650.values[:,0], np.concatenate((measureData_00mT_tauQ2650.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2650.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ2750.values[:,0], np.concatenate((measureData_00mT_tauQ2750.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2750.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ2850.values[:,0], np.concatenate((measureData_00mT_tauQ2850.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2850.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))
# # ax2.plot(measureData_00mT_tauQ2950.values[:,0], np.concatenate((measureData_00mT_tauQ2950.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2950.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))

# # ax2.plot(measureData_00mT_tauQ3050.values[:,0], np.concatenate((measureData_00mT_tauQ3050.values[0:index_join_normal_sf,2], measureData_00mT_tauQ3050.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))


# #ax1.set_ylabel(r'$\Delta_{A(B)}/k_{b}T_{c}(p)$',fontsize = 18.0)
# ax1.set_ylabel(r'$T/T_{c}(p)$',fontsize = 18.0)
# ax1.tick_params(axis='both', which='major', labelsize=30)

ax2.set_xlabel(r'$t/t^{0}_{GL}$',fontsize = 26.0)
ax2.set_ylabel(r'State Volume Fraction $p(t)$',fontsize = 26.0)
ax2.set_ylim(-0.1, 1.0)
ax2.tick_params(axis='both', which='major', labelsize=30)
ax2.legend(prop={'size': 18}, bbox_to_anchor=(1.0, 0.5), loc='right')
ax2.grid(True)

# fig2.tight_layout()
fig2.subplots_adjust(left=0.15, bottom=0.18)  # space for labels

#fig.savefig("plot.png", dpi=300, bbox_inches='tight', pad_inches=0.2)

fig2.savefig("my_plot.png", dpi=300, pad_inches=0.01)

# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# # >>>>>>>>>>>>>         dgap/dt  plot      <<<<<<<<<<<<<<< #
# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

# fig2, ax3 = plt.subplots(1,1);

# index_join_normal_sf = np.where(measureData_00mT_tauQ50.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax3.plot(measureData_00mT_tauQ50.values[:,0], np.gradient(np.concatenate((measureData_00mT_tauQ50.values[0:index_join_normal_sf,2], measureData_00mT_tauQ50.values[index_join_normal_sf:,4])), measureData_00mT_tauQ50.values[:,0]), linewidth=LineWidth, label=r'$\frac{d<\sqrt{A^{\dagger}A}>}{dt}\,,\tau_{Q}=50t_{GL}}$', linestyle='solid', color=(0, 0, 1.0))

# index_join_normal_sf = np.where(measureData_00mT_tauQ150.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax3.plot(measureData_00mT_tauQ150.values[:,0], np.gradient(np.concatenate((measureData_00mT_tauQ150.values[0:index_join_normal_sf,2], measureData_00mT_tauQ150.values[index_join_normal_sf:,4])), measureData_00mT_tauQ150.values[:,0]), linewidth=LineWidth, label=r'$\frac{d<\sqrt{A^{\dagger}A}>}{dt}\,,\tau_{Q}=150t_{GL}}$', linestyle='solid', color=(0, 1.0, 0.0))

# index_join_normal_sf = np.where(measureData_00mT_tauQ250.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax3.plot(measureData_00mT_tauQ250.values[:,0], np.gradient(np.concatenate((measureData_00mT_tauQ250.values[0:index_join_normal_sf,2], measureData_00mT_tauQ250.values[index_join_normal_sf:,4])), measureData_00mT_tauQ250.values[:,0]), linewidth=LineWidth, label=r'$\frac{d<\sqrt{A^{\dagger}A}>}{dt}\,,\tau_{Q}=250t_{GL}}$', linestyle='solid', color=(1.0, 0, 0.0))

# index_join_normal_sf = np.where(measureData_00mT_tauQ350.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax3.plot(measureData_00mT_tauQ350.values[:,0], np.gradient(np.concatenate((measureData_00mT_tauQ350.values[0:index_join_normal_sf,2], measureData_00mT_tauQ350.values[index_join_normal_sf:,4])), measureData_00mT_tauQ150.values[:,0]), linewidth=LineWidth, label=r'$\frac{d<\sqrt{A^{\dagger}A}>}{dt}\,,\tau_{Q}=350t_{GL}}$', linestyle='solid', color=(0.5, 0, 1.0))

# index_join_normal_sf = np.where(measureData_00mT_tauQ450.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax3.plot(measureData_00mT_tauQ450.values[:,0], np.gradient(np.concatenate((measureData_00mT_tauQ450.values[0:index_join_normal_sf,2], measureData_00mT_tauQ450.values[index_join_normal_sf:,4])), measureData_00mT_tauQ150.values[:,0]), linewidth=LineWidth, label=r'$\frac{d<\sqrt{A^{\dagger}A}>}{dt}\,,\tau_{Q}=450t_{GL}}$', linestyle='solid', color=(0.7, 0.6, 0.0))


# # ax3.plot(measureData_00mT_tauQ2050.values[:,0], np.gradient(np.concatenate((measureData_00mT_tauQ2050.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2050.values[index_join_normal_sf:,4])), measureData_00mT_tauQ2050.values[:,0]), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))

# # ax3.plot(measureData_00mT_tauQ2250.values[:,0], np.gradient(np.concatenate((measureData_00mT_tauQ2250.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2250.values[index_join_normal_sf:,4])), measureData_00mT_tauQ2250.values[:,0]), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))

# # ax3.plot(measureData_00mT_tauQ2450.values[:,0], np.gradient(np.concatenate((measureData_00mT_tauQ2450.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2450.values[index_join_normal_sf:,4])), measureData_00mT_tauQ2450.values[:,0]), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))

# # ax3.plot(measureData_00mT_tauQ2650.values[:,0], np.gradient(np.concatenate((measureData_00mT_tauQ2650.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2650.values[index_join_normal_sf:,4])), measureData_00mT_tauQ2650.values[:,0]), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))

# # ax3.plot(measureData_00mT_tauQ2850.values[:,0], np.gradient(np.concatenate((measureData_00mT_tauQ2850.values[0:index_join_normal_sf,2], measureData_00mT_tauQ2850.values[index_join_normal_sf:,4])), measureData_00mT_tauQ2850.values[:,0]), linewidth=LineWidth, label=r'$|\Delta|\,,t_{Q1relx}=1750t_{GL}\,,\tau_{Q2}=50t^{0}_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))

# ax3.set_xlabel(r'$t/t^{0}_{GL}$',fontsize = 26.0)
# ax3.set_ylabel(r'$\frac{d<\sqrt{A^{\dagger}A}>}{dt}/k_{B}T_{C}t^{-1}_{GL}$',fontsize = 26.0)
# ax3.tick_params(axis='both', which='major', labelsize=30)
# ax3.legend(prop={'size': 18}, bbox_to_anchor=(1.0, 1.0), loc='upper right')
# ax3.grid(True)

# # for r in range(100, row, 20):
    
# #     ax2.plot(gaps_A[r,1]*np.linspace(0.,1.,col-2), gaps_A[r,2:],'-', label="A: {} bar".format(gaps_A[r,0]))
# #     ax2.plot(gaps_B[r,1]*np.linspace(0.,1.,col-2), gaps_B[r,2:],'--', label="B: {} bar".format(gaps_B[r,0]))
    
    
# # ax2.set_xlabel(r'$T/mK$',fontsize = 18.0)
# # ax2.set_ylabel(r'$\Delta_{A(B)}/k_{b}T_{c}(p)$',fontsize = 18.0)

# # ax2.legend(prop={'size': 18}, loc=1);
# # ax2.grid(True)



# # # >>>>>>>>>>>>>   fulk free energy plot   <<<<<<<<<<<<<<< #

# # fig3, ax3 = plt.subplots(1,1);

# # for r in range(0, row, 30):
    
# #     ax3.plot(f_A[r,1]*np.linspace(0.,1.,col-2), f_A[r,2:],'-', label="A: {} bar".format(f_A[r,0]))
# #     ax3.plot(f_B[r,1]*np.linspace(0.,1.,col-2), f_B[r,2:],'--', label="B: {} bar".format(f_B[r,0]))
    
    
# # ax3.set_xlabel(r'$T/mK$',fontsize = 18.0)
# # ax3.set_ylabel(r'$f_{A(B)}/{\frac{1}{3}N(0)(k_{b}T_{c})^{2}}$',fontsize = 18.0)

# # ax3.legend(prop={'size': 18}, loc=4);
# # ax3.grid(True)

# # fig4, ax4 = plt.subplots(1,1);

# # for r in range(110, row, 20):
    
# #     ax4.plot(f_A[r,1]*np.linspace(0.,1.,col-2), f_A[r,2:],'-', label="A: {} bar".format(f_A[r,0]))
# #     ax4.plot(f_B[r,1]*np.linspace(0.,1.,col-2), f_B[r,2:],'--', label="B: {} bar".format(f_B[r,0]))
    
    
# # ax4.set_xlabel(r'$T/mK$',fontsize = 18.0)
# # ax4.set_ylabel(r'$f_{A(B)}/{\frac{1}{3}N(0)(k_{b}T_{c})^{2}}$',fontsize = 18.0)

# # ax4.legend(prop={'size': 18}, loc=4);
# # ax4.grid(True)

# # # >>>>>>>>>>>>>>>>  free plot for rth row <<<<<<<<<<<<<<<< #

# # fig5, ax5 = plt.subplots(1,1)

# # r = round(30/0.17); print(" r is ", r, " r*0.17 = ", r*0.17)

# # ax5.plot(f_A[r,1]*np.linspace(0.,1.,col-2), f_A[r,2:],'-', label="A: {} bar".format(f_A[r,0]))
# # ax5.plot(f_B[r,1]*np.linspace(0.,1.,col-2), f_B[r,2:],'--', label="B: {} bar".format(f_B[r,0]))

# # ax5.set_xlabel(r'$T/mK$',fontsize = 18.0)
# # ax5.set_ylabel(r'$f_{A(B)}/{\frac{1}{3}N(0)(k_{b}T_{c})^{2}}$',fontsize = 18.0)

# # ax5.legend(prop={'size': 18}, loc=4)
# # ax5.grid(True)


# # # ******************************************************** #
# # # >>>>>>>>>>>>    equlibrium phase diagram   <<<<<<<<<<<<< #
# # # ******************************************************** #


# # fig6, ax6 = plt.subplots(1,1)

# # ax6.plot(pd[:,2], pd[:,0], 'b-', label=r"$T_{c}^{Greywall}$")

# # boolean_arr = pd[:,1] != 0.
# # # print(boolean_arr," \n\n ", pd[:,1][boolean_arr])
# # ax6.plot(pd[:,1][boolean_arr], pd[:,0][boolean_arr], 'r-', label=r"$T_{AB}^{rws19}$")

# # ax6.set_xlabel(r'$T/mK$',fontsize = 18.0)
# # ax6.set_ylabel(r'$p/bar$',fontsize = 18.0)

# # ax6.legend(prop={'size': 18}, loc=2)
# # # ax6.grid(True)
# # ax6.set_ylim([0., 34.]);ax6.set_xlim([0., 2.486]);
# # ax6.set_title(r"bulk equlibrium phase diagram, $H=0$")

# # text_kwargs1 = dict(ha='center', va='center', fontsize=28, color='C1')
# # text_kwargs2 = dict(ha='center', va='center', fontsize=28, color='blue')
# # text_kwargs3 = dict(ha='center', va='center', fontsize=28, color='black')
# # plt.text(2.212, 30., 'A', **text_kwargs1)
# # plt.text(1.4, 17., 'B', **text_kwargs2)
# # plt.text(2.1, 4.7, 'Normal', **text_kwargs3)

plt.show()
