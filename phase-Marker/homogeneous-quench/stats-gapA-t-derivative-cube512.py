import pandas as pd
import numpy as np

import glob
import os
import re

import sys
sys.path.append("/home/heidi/Documents/SCC-GL-calculator")
import Module_GLSCC_calculator as sc

import matplotlib.pyplot as plt

# >>>>>>>>>>>>>>>             README, pls          <<<<<<<<<<<<<<< #

'''This script is used for vatulazation the stats/*csv files 

generated by dyGiLa phaseCounting() func.
''' 

# >>>>>>>>>>>>> load the *csv files into numpy array <<<<<<<<<<<<< #

# Base directory to start searching
base_dir = '/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cube-512/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL'

# Recursively find all CSV files
csv_files = glob.glob(os.path.join(base_dir, '**', 'stats/measure-stream.csv'), recursive=True)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>   parampeters definations  <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

p = 23 # bar
Tcp = sc.Tcp_mK(p) # mK at 26 bar

LineWidth=3.5
zeroTol = 6e-2

# for the sake of searching maxium of dgapAdt
chopping_idx = 8

# plot line color
lineColors = [
    (0.121, 0.466, 0.705),  # Blue
    (1.000, 0.498, 0.054),  # Orange
    (0.172, 0.627, 0.172),  # Green
    (0.839, 0.153, 0.157),  # Red
    (0.580, 0.404, 0.741),  # Purple
    (0.549, 0.337, 0.294),   # Brown
    (0.05, 0.05, 0.20)      # Dark Navy
]

# line styles
line_styles = ['-', '--', ':', '-.', (0, (5, 10)), (0, (3, 2, 1, 2, 1, 2)) ]

# list for saving freeze out times for differetn tauQ
freeze_out_t_list = []

for csv_path in csv_files:
    
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>>>> extract quench time tauQ <<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

    # Extract the p-xx-bar directory name from the path
    parts = csv_path.split(os.sep)
    
    # Make sure don't go out of bounds, p-xx-bar is the 4th or 5th level depending on tree
    ptauQ_dir = None
    for part in parts:
        # Find a directory name that starts with 'p-xx-bar' and contains a number, python regrx
        match = re.match(r"p-.*-tauQ(\d+)", part)
        if match:
            ptauQ = match.group(1)
            break
    else:
        print(f"Could not find subA number in path: {csv_path}")
        continue

    
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>> Check the first few rows (optional) <<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
    # Read the CSV
    df = pd.read_csv(csv_path)

    # print(df.head())
    # print(f"df.colums : ", df.columns)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>    Tempratue profile plot  <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
    
    # fig1, ax1 = plt.subplots(1,1);

    # ax1.plot(df['t'], df['T_000Q']/Tcp, linewidth=LineWidth, label=fr'$T/T_c\,,\tau_Q={ptauQ}t_{{GL}}$', linestyle='solid', color=(0, 0, 1.0))

    # ax1.set_xlabel(r'$t/t^{0}_{GL}$',fontsize = 22.0)
    # ax1.set_ylabel(r'$T/T_{c}(p)$',fontsize = 22.0)
    # ax1.tick_params(axis='both', which='major', labelsize=30)
    # ax1.legend(prop={'size': 18}, bbox_to_anchor=(1.54, 1.0), loc='upper right')
    # ax1.grid(True)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>  find out Tc and TAB time  <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #


    # Compute difference and get time closest to dx

    print("sc.Tcp_mK(p) : ", sc.Tcp_mK(p))
    print("(sc.tAB_RWS(p)*sc.Tcp_mK(p)) : ", (sc.tAB_RWS(p)*sc.Tcp_mK(p)))    
    
    df['diffTc'] = np.abs(df['T_000Q'] - sc.Tcp_mK(p))
    df['diffTAB'] = np.abs(df['T_000Q'] - (sc.tAB_RWS(p)*sc.Tcp_mK(p)))

    print("df['diffTc'].min() :", df['diffTc'].min())
    print("df['diffTAB'].min() :", df['diffTAB'].min())

    Tc_idx = df[df['diffTc'] == df['diffTc'].min()].index
    print("Tc_idx : ", Tc_idx[0])

    TAB_idx = df[df['diffTAB'] == df['diffTAB'].min()].index
    print("TAB_idx : ", TAB_idx[0])

    print("df['T_000Q'][Tc_idx] :", df['T_000Q'][Tc_idx[0]])
    print("df['T_000Q'][TAB_idx] :", df['T_000Q'][TAB_idx[0]])    
    
    tTc = df['t'][Tc_idx[0]]
    tTAB = df['t'][TAB_idx[0]]

    print("tTc :", tTc)
    print("tTAB :", tTAB)    

    
# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# # >>>>>>>>>>>>>          gapA plot         <<<<<<<<<<<<<<< #
# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

    fig2, ax2 = plt.subplots(1,1,figsize=(12, 7));

    ax2.plot(df["t"], df["sumgapARe_VA"], linewidth=LineWidth, label=fr'$\Delta_{{V}}(t)\,,\tau_Q={ptauQ}t_{{GL}}$', linestyle=line_styles[0], color=lineColors[0])

    # time for Tc and TAB
    ax2.axvline(tTc, color='r', linestyle='--')
    ax2.axvline(tTAB, color='cyan', linestyle='-')        
    
    ax2.set_xlabel(r'$t/t^{0}_{GL}$',fontsize = 26.0)
    ax2.set_ylabel(r'$\Delta_{V}(t)/k_{B}T_{c}$',fontsize = 26.0)
    ax2.set_ylim(-0.5, 5.0)
    ax2.tick_params(axis='both', which='major', labelsize=30)
    # ax2.legend(prop={'size': 18}, bbox_to_anchor=(1.0, 0.5), loc='right')
    ax2.legend(prop={'size': 18}, loc='best')    
    ax2.grid(True)

    fig2.subplots_adjust(left=0.15, bottom=0.18)  # space for labels

    # Create a unique filename based on path
    relative_path = os.path.relpath(csv_path, base_dir)
    print("relative_path : ", relative_path)
    
    plot_name = relative_path.replace(os.sep, '-').replace('.csv', '.png')
    output_path = os.path.join(base_dir, 'gapA-plot/gapA', plot_name)
    print("output_path : ", output_path)
        
    # Ensure output directory exists, only gets the folder part
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    
    #fig.savefig("plot.png", dpi=300, bbox_inches='tight', pad_inches=0.2)
    fig2.savefig(output_path, dpi=300, pad_inches=0.01)

     

# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# # >>>>>>>>>>>>>        dgapA/dt plot       <<<<<<<<<<<<<<< #
# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

    # computing dgapA/dt
    dt = df["t"][1] - df["t"][0]

    # df["xxx"].values to force return numpy array
    # df['xxxx'][5:] returns pandas array starting from idx 5 
    dgapAdt = np.gradient(df["sumgapARe_VA"][chopping_idx:].values, dt)

    # max_dgapAdt_idx = dgapAdt[dgapAdt == np.max(dgapAdt)]
    max_dgapAdt_idx = np.argmax(dgapAdt)
    print("max_dgapAdt_idx : ", max_dgapAdt_idx)

    # add back the chpped index
    freeze_out_t = df["t"][chopping_idx:][max_dgapAdt_idx] + chopping_idx + 1
    print("freeze_out_t :", freeze_out_t)

    # append freeze out time in to list
    freeze_out_t_list.append({'tauQ': ptauQ, 'freeze_out_time': freeze_out_t})


    fig3, ax3 = plt.subplots(1,1,figsize=(14, 7));

    ax3.plot(df["t"][chopping_idx:], dgapAdt, linewidth=LineWidth, label=fr'$\frac{{d \Delta_V}}{{dt}}\,,\tau_Q={ptauQ}t_{{GL}}$', linestyle=line_styles[0], color=lineColors[1])

    # time for Tc and TAB
    ax3.axvline(tTc, color='r', linestyle='--')
    ax3.axvline(tTAB, color='cyan', linestyle='-')
    ax3.axvline(freeze_out_t, color='deepskyblue', linestyle='-')            
    
    ax3.set_xlabel(r'$t/t^{0}_{GL}$',fontsize = 26.0)
    ax3.set_ylabel(r'$\frac{d\Delta_{V}(t)}{dt}$',fontsize = 26.0)
    ax3.set_ylim(-0.01, 0.02)
    ax3.tick_params(axis='both', which='major', labelsize=30)
    # ax2.legend(prop={'size': 18}, bbox_to_anchor=(1.0, 0.5), loc='right')
    ax3.legend(prop={'size': 18}, loc='best')    
    ax3.grid(True)

    fig3.subplots_adjust(left=0.15, bottom=0.18)  # space for labels

    # Create a unique filename based on path
    relative_path = os.path.relpath(csv_path, base_dir)
    print("relative_path : ", relative_path)
    
    plot_name = relative_path.replace(os.sep, '-').replace('.csv', '.png')
    output_path = os.path.join(base_dir, 'gapA-plot/dgapAdt', plot_name)
    print("output_path : ", output_path)
        
    # Ensure output directory exists, only gets the folder part
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    
    #fig.savefig("plot.png", dpi=300, bbox_inches='tight', pad_inches=0.2)
    fig3.savefig(output_path, dpi=300, pad_inches=0.01)


    plt.close(fig2)
    plt.close(fig3)

# save freeze_out_t_list to csv file
fo_data = pd.DataFrame(freeze_out_t_list)

# Convert tau to number type first!
fo_data['tauQ'] = pd.to_numeric(fo_data['tauQ'])

# Sort by tauQ in ascending order
fo_data = fo_data.sort_values(by='tauQ', ascending=True)

fo_data = fo_data.reset_index(drop=True)

# csv saving path cooking
csv_path = os.path.join(base_dir, 'gapA-plot', 'freeze-out-time-tauQ.csv')

fo_data.to_csv(csv_path, index=False, quoting=csv.QUOTE_ALL)

