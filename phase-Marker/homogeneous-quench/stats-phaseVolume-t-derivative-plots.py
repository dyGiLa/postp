import pandas as pd
import numpy as np

import glob
import os
import re

import sys
sys.path.append("/home/heidi/Documents/SCC-GL-calculator")
import Module_GLSCC_calculator as sc

import matplotlib.pyplot as plt

# >>>>>>>>>>>>>>>             README, pls          <<<<<<<<<<<<<<< #

'''This script is used for vatulazation the stats/*csv files 

generated by dyGiLa phaseCounting() func.
''' 

# >>>>>>>>>>>>> load the *csv files into numpy array <<<<<<<<<<<<< #

# Base directory to start searching
base_dir = '/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-G/project_462000960/cubu-256-3/H-00mT/p-23bar/RSeed-1728-tauQ-50-5050tGL'

# Recursively find all CSV files
csv_files = glob.glob(os.path.join(base_dir, '**', 'stats/phaseVolume-stream.csv'), recursive=True)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>   parampeters definations  <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

p = 23 # bar
Tcp = sc.Tcp_mK(p) # mK at 26 bar

LineWidth=3.5
zeroTol = 6e-2

# plot line color
lineColors = [
    (0.121, 0.466, 0.705),  # Blue
    (1.000, 0.498, 0.054),  # Orange
    (0.172, 0.627, 0.172),  # Green
    (0.839, 0.153, 0.157),  # Red
    (0.580, 0.404, 0.741),  # Purple
    (0.549, 0.337, 0.294),   # Brown
    (0.05, 0.05, 0.20)      # Dark Navy
]

# line styles
line_styles = ['-', '--', ':', '-.', (0, (5, 10)), (0, (3, 2, 1, 2, 1, 2)) ]

for csv_path in csv_files:

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>>>> extract quench time tauQ <<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

    # Extract the subA directory name from the path
    parts = csv_path.split(os.sep)
    
    # Make sure we don't go out of bounds (e.g., subA is the 4th or 5th level depending on your tree)
    ptauQ_dir = None
    for part in parts:
        # Find a directory name that starts with 'subA' and contains a number
        match = re.match(r"p-.*-tauQ(\d+)", part)
        if match:
            ptauQ = match.group(1)
            break
    else:
        print(f"Could not find subA number in path: {csv_path}")
        continue

    
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>> Check the first few rows (optional) <<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
    # Read the CSV
    df = pd.read_csv(csv_path)

    # print(df.head())
    # print(f"df.colums : ", df.columns)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>    Tempratue profile plot  <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
    
    # fig1, ax1 = plt.subplots(1,1);

    # ax1.plot(df['t'], df['T_000Q']/Tcp, linewidth=LineWidth, label=fr'$T/T_c\,,\tau_Q={ptauQ}t_{{GL}}$', linestyle='solid', color=(0, 0, 1.0))

    # ax1.set_xlabel(r'$t/t^{0}_{GL}$',fontsize = 22.0)
    # ax1.set_ylabel(r'$T/T_{c}(p)$',fontsize = 22.0)
    # ax1.tick_params(axis='both', which='major', labelsize=30)
    # ax1.legend(prop={'size': 18}, bbox_to_anchor=(1.54, 1.0), loc='upper right')
    # ax1.grid(True)

# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# # >>>>>>>>>   t-derivative of pVolume plot      <<<<<<<<<< #
# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

    # Compute the numerical derivative using numpy's gradient
    # df["xxx"].values to force return numpy array
    # dt = np.gradient(df["t"].values)
    dt = df["t"][1] - df["t"][0]

    # df["xxx"].values to force return numpy array    
    dVrp5dt = np.gradient(df["Vratio_p5_acc"].values, dt)
    dVrp9dt = np.gradient(df["Vratio_p9_acc"].values, dt)
    dVrp3dt = np.gradient(df["Vratio_p3_acc"].values, dt)
    dVrp1dt = np.gradient(df["Vratio_p1_acc"].values, dt)    

    # print("np.max(dVrp5dt) : ", np.max(dVrp5dt))
    # print("np.max(dVrp9dt) : ", np.max(dVrp9dt))
    # print("np.max(dVrp3dt) : ", np.max(dVrp3dt))

    fig2, ax2 = plt.subplots(1,1,figsize=(16, 7));

    ax2.plot(df["t"], dVrp5dt, linewidth=LineWidth, label=fr'$\frac{{p_B}}{{dt}}\,,\tau_Q={ptauQ}t_{{GL}}$', linestyle=line_styles[0], color=lineColors[0])

    ax2.plot(df["t"], dVrp9dt, linewidth=LineWidth, label=fr'$\frac{{p_A}}{{dt}}\,,\tau_Q={ptauQ}t_{{GL}}$', linestyle=line_styles[0], color=lineColors[1])

    ax2.plot(df["t"], dVrp3dt, linewidth=LineWidth, label=fr'$\frac{{p_{{plnanr}}}}{{dt}}\,,\tau_Q={ptauQ}t_{{GL}}$', linestyle=line_styles[1], color=lineColors[2])

    ax2.plot(df["t"], dVrp1dt, linewidth=LineWidth, label=fr'$\frac{{p_{{AB}}}}{{dt}}\,,\tau_Q={ptauQ}t_{{GL}}$', linestyle=line_styles[5], color=lineColors[6])    

    ax2.set_xlabel(r'$t/t^{0}_{GL}$',fontsize = 26.0)
    ax2.set_ylabel(r'State Growing Rate $\frac{p(t)}{dt}$',fontsize = 26.0)
    ax2.set_ylim(-0.003, 0.003)
    ax2.tick_params(axis='both', which='major', labelsize=30)
    # ax2.legend(prop={'size': 18}, bbox_to_anchor=(1.0, 0.5), loc='right')
    ax2.legend(prop={'size': 18}, loc='best')    
    ax2.grid(True)

    fig2.subplots_adjust(left=0.15, bottom=0.18)  # space for labels

# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# # >>>>>>>>>   prepare saving path & file names  <<<<<<<<<< #
# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
    
    # Create a unique filename based on path
    relative_path = os.path.relpath(csv_path, base_dir)
    print("relative_path : ", relative_path)
    
    plot_name = relative_path.replace(os.sep, '-').replace('.csv', '.png')
    output_path = os.path.join(base_dir, 'pVolume-plot/pVGrowingRate-pM1include', plot_name)
    print("output_path : ", output_path)
        
    # Ensure output directory exists, only gets the folder part
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    
    #fig.savefig("plot.png", dpi=300, bbox_inches='tight', pad_inches=0.2)
    fig2.savefig(output_path, dpi=300, pad_inches=0.01)
    # plt.close(fig1)
    plt.close(fig2)


# # # ******************************************************** #
# # # >>>>>>>>>>>>    equlibrium phase diagram   <<<<<<<<<<<<< #
# # # ******************************************************** #


# # fig6, ax6 = plt.subplots(1,1)

# # ax6.plot(pd[:,2], pd[:,0], 'b-', label=r"$T_{c}^{Greywall}$")

# # boolean_arr = pd[:,1] != 0.
# # # print(boolean_arr," \n\n ", pd[:,1][boolean_arr])
# # ax6.plot(pd[:,1][boolean_arr], pd[:,0][boolean_arr], 'r-', label=r"$T_{AB}^{rws19}$")

# # ax6.set_xlabel(r'$T/mK$',fontsize = 18.0)
# # ax6.set_ylabel(r'$p/bar$',fontsize = 18.0)

# # ax6.legend(prop={'size': 18}, loc=2)
# # # ax6.grid(True)
# # ax6.set_ylim([0., 34.]);ax6.set_xlim([0., 2.486]);
# # ax6.set_title(r"bulk equlibrium phase diagram, $H=0$")

# # text_kwargs1 = dict(ha='center', va='center', fontsize=28, color='C1')
# # text_kwargs2 = dict(ha='center', va='center', fontsize=28, color='blue')
# # text_kwargs3 = dict(ha='center', va='center', fontsize=28, color='black')
# # plt.text(2.212, 30., 'A', **text_kwargs1)
# # plt.text(1.4, 17., 'B', **text_kwargs2)
# # plt.text(2.1, 4.7, 'Normal', **text_kwargs3)

# plt.show()
