import pandas as pd
import numpy as np

import glob
import os
import re

import sys
sys.path.append("/home/heidi/Documents/SCC-GL-calculator")
import Module_GLSCC_calculator as sc

import matplotlib.pyplot as plt

# >>>>>>>>>>>>>>>             README, pls          <<<<<<<<<<<<<<< #

'''This script is used for vatulazation the stats/*csv files 

generated by dyGiLa phaseCounting() func.
''' 

# >>>>>>>>>>>>> load the *csv files into numpy array <<<<<<<<<<<<< #

# Base directory to start searching
base_dir = '/home/heidi/ReHD/dyGiLa-project/dyGiLa-data/lumi-project_462000960/project_462000960/heterogenouos-quench/cube-512/H-30mT/p-5.5bar-T0-0.5-0.95/E0-100eV/RSeed-256-T0-0.5-0.95'

# Recursively find all CSV files
csv_files = glob.glob(os.path.join(base_dir, '**', 'stats/phaseVolume-stream.csv'), recursive=True)

# Switch for plot t-Tc calibraton
calibrate_to_Tc = False

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>   load the freeze-out time csv  <<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

fo_csv_files = glob.glob(os.path.join(base_dir, '**', 'gapA-plot/freeze-out-time-tauQ.csv'), recursive=True)

print('fo_csv_files : ', fo_csv_files)

# fo_data = pd.read_csv(fo_csv_files[0])

# result = df[df['tau'] == 256]['value'].values[0]

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>   parampeters definations  <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

p = 22 # bar
Tcp = sc.Tcp_mK(p) # mK at 26 bar

LineWidth=3.5
zeroTol = 6e-2

# plot line color
lineColors = [
    (0.121, 0.466, 0.705),  # Blue
    (1.000, 0.498, 0.054),  # Orange
    (0.172, 0.627, 0.172),  # Green
    (0.839, 0.153, 0.157),  # Red
    (0.580, 0.404, 0.741),  # Purple
    (0.549, 0.337, 0.294),   # Brown
    (0.05, 0.05, 0.20)      # Dark Navy
]

# line styles
line_styles = ['-', '--', ':', '-.', (0, (5, 10)), (0, (3, 2, 1, 2, 1, 2)) ]

for csv_path in csv_files:

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>>>> extract quench time tauQ <<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

    # Extract the subA directory name from the path
    parts = csv_path.split(os.sep)
    
    # Make sure we don't go out of bounds (e.g., subA is the 4th or 5th level depending on my tree)
    Ttdb1_dir = None
    for part in parts:
        # Find a directory name that starts with 'subA' and contains a number
        match = re.match(r"p-5\.5-T1-([0-9.]+)", part)
        if match:
            Ttdb1 = match.group(1)
            break
    else:
        print(f"Could not find folder number in path: {csv_path}")
        continue

    
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>> Check the first few rows (optional) <<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
    # Read the CSV
    df = pd.read_csv(csv_path)

    # print(df.head())
    # print(f"df.colums : ", df.columns)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>    Tempratue profile plot  <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
    
    # fig1, ax1 = plt.subplots(1,1);

    # ax1.plot(df['t'], df['T_000Q']/Tcp, linewidth=LineWidth, label=fr'$T/T_c\,,\tau_Q={ptauQ}t_{{GL}}$', linestyle='solid', color=(0, 0, 1.0))

    # ax1.set_xlabel(r'$t/t^{0}_{GL}$',fontsize = 22.0)
    # ax1.set_ylabel(r'$T/T_{c}(p)$',fontsize = 22.0)
    # ax1.tick_params(axis='both', which='major', labelsize=30)
    # ax1.legend(prop={'size': 18}, bbox_to_anchor=(1.54, 1.0), loc='upper right')
    # ax1.grid(True)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>  find out Tc and TAB time  <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #


    # Compute difference and get time closest to dx

    # print("sc.Tcp_mK(p) : ", sc.Tcp_mK(p))
    # print("(sc.tAB_RWS(p)*sc.Tcp_mK(p)) : ", (sc.tAB_RWS(p)*sc.Tcp_mK(p)))    
    
    # df['diffTc'] = np.abs(df['T_000Q'] - sc.Tcp_mK(p))
    # df['diffTAB'] = np.abs(df['T_000Q'] - (sc.tAB_RWS(p)*sc.Tcp_mK(p)))

    # print("df['diffTc'].min() :", df['diffTc'].min())
    # print("df['diffTAB'].min() :", df['diffTAB'].min())

    # Tc_idx = df[df['diffTc'] == df['diffTc'].min()].index
    # print("Tc_idx : ", Tc_idx[0])

    # TAB_idx = df[df['diffTAB'] == df['diffTAB'].min()].index
    # print("TAB_idx : ", TAB_idx[0])

    
    # # Tc_idx = df['diffTc'].idxmin()
    # # TAB_idx = df['diffTAB'].idxmin()

    # print("df['T_000Q'][Tc_idx] :", df['T_000Q'][Tc_idx[0]])
    # print("df['T_000Q'][TAB_idx] :", df['T_000Q'][TAB_idx[0]])    
    
    # # tTc = df.loc[Tc_idx, 't']
    # # tTAB = df.loc[TAB_idx, 't']

    # tTc = df['t'][Tc_idx[0]]
    # tTAB = df['t'][TAB_idx[0]]

    # print("tTc :", tTc)
    # print("tTAB :", tTAB)    

    # # get the freeze out time for tauQ
    # # print("ptauQ :", ptauQ)    
    # # print("fo_data['tauQ'] :", fo_data['tauQ'])
    # # print("fo_data['tauQ'] == ptauQ :", fo_data['tauQ'] == int(ptauQ))    
    # freeze_out_t = fo_data[fo_data['tauQ'] == float(ptauQ)]['freeze_out_time'].values[0]

    
# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# # >>>>>>>>>   t-derivative of pVolume plot      <<<<<<<<<< #
# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

    # Compute the numerical derivative using numpy's gradient
    # df["xxx"].values to force return numpy array
    # dt = np.gradient(df["t"].values)
    dt = df["t"][1] - df["t"][0]

    # df["xxx"].values to force return numpy array    
    dVrp5dt = np.gradient(df["Vratio_p5_acc"].values, dt)
    dVrp9dt = np.gradient(df["Vratio_p9_acc"].values, dt)
    dVrp3dt = np.gradient(df["Vratio_p3_acc"].values, dt)
    dVrp1dt = np.gradient(df["Vratio_p1_acc"].values, dt)    

    # print("np.max(dVrp5dt) : ", np.max(dVrp5dt))
    # print("np.max(dVrp9dt) : ", np.max(dVrp9dt))
    # print("np.max(dVrp3dt) : ", np.max(dVrp3dt))

    fig2, ax2 = plt.subplots(1,1,figsize=(16, 7));

    ax2.plot(df["t"], dVrp5dt, linewidth=LineWidth, label=fr'$\frac{{dp_B}}{{dt}}\,,T_1={Ttdb1}T_0$', linestyle=line_styles[0], color=lineColors[0])

    ax2.plot(df["t"], dVrp9dt, linewidth=LineWidth, label=fr'$\frac{{dp_A}}{{dt}}\,,T_1={Ttdb1}T_0$', linestyle=line_styles[0], color=lineColors[1])

    ax2.plot(df["t"], dVrp3dt, linewidth=LineWidth, label=fr'$\frac{{dp_{{plnanr}}}}{{dt}}\,,T_1={Ttdb1}T_0$', linestyle=line_styles[1], color=lineColors[2])

#    ax2.plot(df["t"], dVrp1dt, linewidth=LineWidth, label=fr'$\frac{{dp_{{bg}}}}{{dt}}\,,T_1={Ttdb1}T_0$', linestyle=line_styles[0], color=lineColors[6])    

    # time for Tc & TAB
    # ax2.axvline(tTc, color='r', linestyle='--', label=fr'$t_{{T_c}}={tTc}$')
    # ax2.axvline(tTAB, color='cyan', linestyle='--', label=fr'$t_{{T_{{AB}}}}={tTAB}$')        
    # ax2.axvline(tTc, color='r', linestyle='--')
    # ax2.axvline(tTAB, color='cyan', linestyle='-')
    # ax2.axvline(freeze_out_t, color='deepskyblue', linestyle='-')            

    
    ax2.set_xlabel(r'$t/t^{0}_{GL}$',fontsize = 26.0)
    ax2.set_ylabel(r'State Proliferation Rate $\frac{dp(t)}{dt}$',fontsize = 26.0)

    # calibrate the x-axis
    if calibrate_to_Tc == True:
        #ax2.set_xlim(tTc, df['t'].iloc[-1])
        ax2.set_xlim(tTc, 2000)
    else:
        ax2.set_xlim(0.0, 20000.0)
                       
    ax2.set_ylim(-0.002, 0.002)
    # ax2.set_ylim(10**-10, 10**-4)
    # ax2.set_yscale('log')
    ax2.tick_params(axis='both', which='major', labelsize=30)
    # ax2.legend(prop={'size': 18}, bbox_to_anchor=(1.0, 0.5), loc='right')
    ax2.legend(prop={'size': 18}, loc='best')    
    ax2.grid(True)

    fig2.subplots_adjust(left=0.15, bottom=0.18)  # space for labels

# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# # >>>>>>>>>   prepare saving path & file names  <<<<<<<<<< #
# # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
    
    # Create a unique filename based on path
    relative_path = os.path.relpath(csv_path, base_dir)
    print("relative_path : ", relative_path)
    
    plot_name = relative_path.replace(os.sep, '-').replace('.csv', '.png')
    output_path = os.path.join(base_dir, 'pVolume-plot/pVGrowingRate-pM1include', plot_name)
    print("output_path : ", output_path)
        
    # Ensure output directory exists, only gets the folder part
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    
    #fig.savefig("plot.png", dpi=300, bbox_inches='tight', pad_inches=0.2)
    fig2.savefig(output_path, dpi=300, pad_inches=0.01)
    # plt.close(fig1)
    plt.close(fig2)

