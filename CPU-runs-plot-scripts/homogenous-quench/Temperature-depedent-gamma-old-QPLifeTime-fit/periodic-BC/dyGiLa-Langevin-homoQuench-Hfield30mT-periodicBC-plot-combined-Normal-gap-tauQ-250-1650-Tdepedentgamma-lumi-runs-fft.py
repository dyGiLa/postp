import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, rfft, fftfreq, fftshift

# >>>>>>>>>>>>>>>             README, pls          <<<<<<<<<<<<<<< #

'''This script is used for vatulazation the stats/*csv files 

generated by dyGiLa write_energies() func.
''' 

# >>>>>>>>>>>>> load the *csv files into numpy array <<<<<<<<<<<<< #


measureData_h30mT_tauQ250 = pd.read_csv('/home/heidi/Documents/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-C/homogenous-quench-periodicBC/test-homogenous-quench-tauQ250/stats/measure-stream.csv', sep=' ', header=None)

measureData_h30mT_tauQ1650 = pd.read_csv('/home/heidi/Documents/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-C/homogenous-quench-periodicBC/test-homogenous-quench-tauQ1650/stats/measure-stream.csv', sep=' ', header=None)

### For all *csv files, delimiter is comma * *.
### Every line corresponds to a common pressure value,
### the 0th element of every line is sim time t, gol.t in unit of tGL
### the 1st element of every line is temperature of homogenous quench (mK),
### the 2nd element of every line .

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>   parampeters definations  <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

Tcp = 2.378 # mK at 26 bar
LineWidth=3.5
zeroTol = 6.5e-2

fig1, ax1 = plt.subplots(1,1)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>          gap \sqrt{A^dagger.A} FFT plot           <<#
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

###################
### tauQ = 250 ###

# extimated time after which system is thought as bulk equlibrium of a phase
bulk_eqTime = 800 # can be 1400
t      = measureData_h30mT_tauQ250.values[:,0]
Deltat = measureData_h30mT_tauQ250.values[:,4]
print(t)

index_t_after_pick = np.where(t >= bulk_eqTime)[0][0]
#print(index_t_after_pick)

t_pick = t[index_t_after_pick:] - bulk_eqTime
#print(t_pick)
Deltat_pick = Deltat[index_t_after_pick:]

# FFT operations
spDup = fftshift(fft(Deltat_pick))
#print(spDup.shape)

freqNP = fftshift(fftfreq(t_pick.shape[-1],0.1))
#print(freqNP.shape)

index_Pos_freq = np.where(freqNP >= 0)[0][0]
freq = freqNP[index_Pos_freq:]
sp   = spDup[index_Pos_freq:]
#print(freqNP)
#print(abs(sp))
ax1.semilogy(freq, np.abs(sp), linewidth=LineWidth, label=r'$<\Delta>(\nu),\tau_{Q}=250t_{GL}}$', linestyle='solid', color=(0, 0, 1.0))

###################
### tauQ = 1650 ###

# extimated time after which system is thought as bulk equlibrium of a phase
bulk_eqTime = 1540
t      = measureData_h30mT_tauQ1650.values[:,0]
Deltat = measureData_h30mT_tauQ1650.values[:,4]
print(t)

index_t_after_pick = np.where(t >= bulk_eqTime)[0][0]
#print(index_t_after_pick)

t_pick = t[index_t_after_pick:] - bulk_eqTime
#print(t_pick)
Deltat_pick = Deltat[index_t_after_pick:]

# FFT operations
spDup = fftshift(fft(Deltat_pick))
#print(spDup.shape)

freqNP = fftshift(fftfreq(t_pick.shape[-1],0.1))
#print(freqNP.shape)

index_Pos_freq = np.where(freqNP >= 0)[0][0]
freq = freqNP[index_Pos_freq:]
sp   = spDup[index_Pos_freq:]
#print(freqNP)
#print(abs(sp))
ax1.semilogy(freq, np.abs(sp), linewidth=LineWidth, label=r'$<\Delta>(\nu),\tau_{Q}=1650t_{GL}}$', linestyle='solid', color=(0, 1.0, 0.0))

###################
### tauQ = 1750 ###

# # extimated time after which system is thought as bulk equlibrium of a phase
# bulk_eqTime = 1290
# t      = measureData_h30mT_tauQ1750.values[:,0]
# Deltat = measureData_h30mT_tauQ1750.values[:,4]

# index_t_after_pick = np.where(t >= bulk_eqTime)[0][0]
# #print(index_t_after_pick)

# t_pick = t[index_t_after_pick:] - bulk_eqTime
# #print(t_pick)
# Deltat_pick = Deltat[index_t_after_pick:]

# # FFT operations
# spDup = fftshift(fft(Deltat_pick))
# #print(spDup.shape)

# freqNP = fftshift(fftfreq(t_pick.shape[-1]))
# #print(freqNP.shape)

# index_Pos_freq = np.where(freqNP >= 0)[0][0]
# freq = freqNP[index_Pos_freq:]
# sp   = spDup[index_Pos_freq:]
# #print(freqNP)
# #print(abs(sp))
# ax1.semilogy(freq, np.abs(sp), linewidth=LineWidth, label=r'$<\Delta>(\nu),\tau_{Q}=1750t_{GL}}$', linestyle='solid', color=(1.0, 0.0, 0.0))

# ###################
# ### tauQ = 1850 ###

# # extimated time after which system is thought as bulk equlibrium of a phase
# bulk_eqTime = 1360
# t      = measureData_h30mT_tauQ1850.values[:,0]
# Deltat = measureData_h30mT_tauQ1850.values[:,4]

# index_t_after_pick = np.where(t >= bulk_eqTime)[0][0]
# #print(index_t_after_pick)

# t_pick = t[index_t_after_pick:] - bulk_eqTime
# #print(t_pick)
# Deltat_pick = Deltat[index_t_after_pick:]

# # FFT operations
# spDup = fftshift(fft(Deltat_pick))
# #print(spDup.shape)

# freqNP = fftshift(fftfreq(t_pick.shape[-1]))
# #print(freqNP.shape)

# index_Pos_freq = np.where(freqNP >= 0)[0][0]
# freq = freqNP[index_Pos_freq:]
# sp   = spDup[index_Pos_freq:]
# #print(freqNP)
# #print(abs(sp))
# ax1.semilogy(freq, np.abs(sp), linewidth=LineWidth, label=r'$<\Delta>(\nu),\tau_{Q}=1850t_{GL}}$', linestyle='solid', color=(0.5, 0.0, 1.0))

# ###################
# ### tauQ = 1950 ###

# # extimated time after which system is thought as bulk equlibrium of a phase
# bulk_eqTime = 1440
# t      = measureData_h30mT_tauQ1950.values[:,0]
# Deltat = measureData_h30mT_tauQ1950.values[:,4]

# index_t_after_pick = np.where(t >= bulk_eqTime)[0][0]
# #print(index_t_after_pick)

# t_pick = t[index_t_after_pick:] - bulk_eqTime
# #print(t_pick)
# Deltat_pick = Deltat[index_t_after_pick:]

# # FFT operations
# spDup = fftshift(fft(Deltat_pick))
# #print(spDup.shape)

# freqNP = fftshift(fftfreq(t_pick.shape[-1]))
# #print(freqNP.shape)

# index_Pos_freq = np.where(freqNP >= 0)[0][0]
# freq = freqNP[index_Pos_freq:]
# sp   = spDup[index_Pos_freq:]
# #print(freqNP)
# #print(abs(sp))
# ax1.semilogy(freq, np.abs(sp), linewidth=LineWidth, label=r'$<\Delta>(\nu),\tau_{Q}=1950t_{GL}}$', linestyle='solid', color=(0.7, 0.6, 1.0))


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>>>>>  bulk fft plots <<<<<<<<<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #


ax1.set_xlabel(r'$\nu/t^{-1}_{GL}$',fontsize = 26.0)
ax1.set_ylabel(r'$<\Delta>(\nu)$',fontsize = 26.0)
ax1.set_xlim(0,0.3)
ax1.set_ylim(0.1,1)
ax1.tick_params(axis='both', which='major', labelsize=30)
ax1.legend(prop={'size': 18}, bbox_to_anchor=(1.0, 1.0), loc='upper right')

ax1.grid(True)

plt.show()
