import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# >>>>>>>>>>>>>>>             README, pls          <<<<<<<<<<<<<<< #

'''This script is used for vatulazation the stats/*csv files 

generated by dyGiLa write_energies() func.
''' 

# >>>>>>>>>>>>> load the *csv files into numpy array <<<<<<<<<<<<< #

# with open('measure-stream.csv') as t_mesures:
#     mesure_data = csv.reader(t_mesures, delimiter=' ')



measureData_h30mT_tauQ250 = pd.read_csv('/home/heidi/Documents/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-C/homogenous-quench-periodicBC/test-homogenous-quench-tauQ250/stats/measure-stream.csv', sep=' ', header=None)

measureData_h30mT_tauQ1650 = pd.read_csv('/home/heidi/Documents/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-C/homogenous-quench-periodicBC/test-homogenous-quench-tauQ1650/stats/measure-stream.csv', sep=' ', header=None)

measureData_h30mT_tauQ3000 = pd.read_csv('/home/heidi/Documents/dyGiLa-project/dyGiLa-data/dyGiLa-Langevin/thermal-bath-UniT-Hfield-quenches/lumi-runs/thermal-bath-UniT-Hfield-quenches/LUMI-C/homogenous-quench-periodicBC/test-homogenous-quench-tauQ3000/stats/measure-stream.csv', sep=' ', header=None)

### For all *csv files, delimiter is comma * *.
### Every line corresponds to a common pressure value,
### the 0th element of every line is sim time t, gol.t in unit of tGL
### the 1st element of every line is temperature of homogenous quench (mK),
### the 2nd element of every line .

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>   parampeters definations  <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

Tcp = 2.378 # mK at 26 bar
LineWidth=3.5
zeroTol = 6.5e-2

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>    Tempratue profile plot  <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
fig1, ax1 = plt.subplots(1,1);

# for r in range(0, row, 30):
    
#     ax1.plot(gaps_A[r,1]*np.linspace(0.,1.,col-2), gaps_A[r,2:],'-', label="A: {} bar".format(gaps_A[r,0]))
#     ax1.plot(gaps_B[r,1]*np.linspace(0.,1.,col-2), gaps_B[r,2:],'--', label="B: {} bar".format(gaps_B[r,0]))

ax1.plot(measureData_h30mT_tauQ250.values[:,0], measureData_h30mT_tauQ250.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,\tau_{Q}=250t_{GL}}$', linestyle='solid', color=(0, 0, 1.0))
ax1.plot(measureData_h30mT_tauQ1650.values[:,0], measureData_h30mT_tauQ1650.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,\tau_{Q}=1650t_{GL}}$', linestyle='solid', color=(0, 0, 1.0))
ax1.plot(measureData_h30mT_tauQ3000.values[:,0], measureData_h30mT_tauQ3000.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,\tau_{Q}=3000t_{GL}}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_h30mT_tauQ1850.values[:,0], measureData_h30mT_tauQ1850.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,\tau_{Q}=1850t_{GL}}$', linestyle='solid', color=(0, 0, 1.0))
# ax1.plot(measureData_h30mT_tauQ1950.values[:,0], measureData_h30mT_tauQ1950.values[:,1]/Tcp, linewidth=LineWidth, label=r'$T/T_{c}\,,\tau_{Q}=1950t_{GL}}$', linestyle='solid', color=(0, 0, 1.0))


ax1.set_xlabel(r'$t/t^{0}_{GL}$',fontsize = 22.0)
#ax1.set_ylabel(r'$\Delta_{A(B)}/k_{b}T_{c}(p)$',fontsize = 18.0)
ax1.set_ylabel(r'$T/T_{c}(p)$',fontsize = 22.0)
ax1.tick_params(axis='both', which='major', labelsize=30)
ax1.legend(prop={'size': 18}, bbox_to_anchor=(1.54, 1.0), loc='upper right')
ax1.grid(True)


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>> gap \sqrt{A^dagger.A} plot <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

fig2, ax2 = plt.subplots(1,1);

index_join_normal_sf = np.where(measureData_h30mT_tauQ250.values[0:,2] >= zeroTol)[0][0]
print(index_join_normal_sf)
ax2.plot(measureData_h30mT_tauQ250.values[:,0], np.concatenate((measureData_h30mT_tauQ250.values[0:index_join_normal_sf,2], measureData_h30mT_tauQ250.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,\tau_{Q}=250t_{GL}$', linestyle='dashdot', color=(0, 0, 1.0))

index_join_normal_sf = np.where(measureData_h30mT_tauQ1650.values[0:,2] >= zeroTol)[0][0]
print(index_join_normal_sf)
ax2.plot(measureData_h30mT_tauQ1650.values[:,0], np.concatenate((measureData_h30mT_tauQ1650.values[0:index_join_normal_sf,2], measureData_h30mT_tauQ1650.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,\tau_{Q}=1650t_{GL}$', linestyle='dashdot', color=(0, 1.0, 0.0))

index_join_normal_sf = np.where(measureData_h30mT_tauQ3000.values[0:,2] >= zeroTol)[0][0]
print(index_join_normal_sf)
ax2.plot(measureData_h30mT_tauQ3000.values[:,0], np.concatenate((measureData_h30mT_tauQ3000.values[0:index_join_normal_sf,2], measureData_h30mT_tauQ3000.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,\tau_{Q}=3000t_{GL}$', linestyle='dashdot', color=(1.0, 0, 0.0))

# index_join_normal_sf = np.where(measureData_h30mT_tauQ1850.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax2.plot(measureData_h30mT_tauQ1850.values[:,0], np.concatenate((measureData_h30mT_tauQ1850.values[0:index_join_normal_sf,2], measureData_h30mT_tauQ1850.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,\tau_{Q}=1850t_{GL}$', linestyle='dashdot', color=(0.5, 0, 1.0))

# index_join_normal_sf = np.where(measureData_h30mT_tauQ1950.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax2.plot(measureData_h30mT_tauQ1950.values[:,0], np.concatenate((measureData_h30mT_tauQ1950.values[0:index_join_normal_sf,2], measureData_h30mT_tauQ1950.values[index_join_normal_sf:,4])), linewidth=LineWidth, label=r'$|\Delta|\,,\tau_{Q}=1950t_{GL}$', linestyle='dashdot', color=(0.7, 0.6, 0.0))

ax2.set_xlabel(r'$t/t^{0}_{GL}$',fontsize = 26.0)
ax2.set_ylabel(r'$<\sqrt{A^{\dagger}}A>/k_{B}T_{C}$',fontsize = 26.0)
ax2.tick_params(axis='both', which='major', labelsize=30)
ax2.legend(prop={'size': 18}, bbox_to_anchor=(1.0, 0.0), loc='lower right')
ax2.grid(True)


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# >>>>>>>>>>>>>         dgap/dt  plot      <<<<<<<<<<<<<<< #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

fig2, ax3 = plt.subplots(1,1);

index_join_normal_sf = np.where(measureData_h30mT_tauQ250.values[0:,2] >= zeroTol)[0][0]
print(index_join_normal_sf)
ax3.plot(measureData_h30mT_tauQ250.values[:,0], np.gradient(np.concatenate((measureData_h30mT_tauQ250.values[0:index_join_normal_sf,2], measureData_h30mT_tauQ250.values[index_join_normal_sf:,4])), measureData_h30mT_tauQ250.values[:,0]), linewidth=LineWidth, label=r'$\frac{d<\sqrt{A^{\dagger}A}>}{dt}\,,\tau_{Q}=250t_{GL}}$', linestyle='solid', color=(0, 0, 1.0))

index_join_normal_sf = np.where(measureData_h30mT_tauQ1650.values[0:,2] >= zeroTol)[0][0]
print(index_join_normal_sf)
ax3.plot(measureData_h30mT_tauQ1650.values[:,0], np.gradient(np.concatenate((measureData_h30mT_tauQ1650.values[0:index_join_normal_sf,2], measureData_h30mT_tauQ1650.values[index_join_normal_sf:,4])), measureData_h30mT_tauQ1650.values[:,0]), linewidth=LineWidth, label=r'$\frac{d<\sqrt{A^{\dagger}A}>}{dt}\,,\tau_{Q}=1650t_{GL}}$', linestyle='solid', color=(0, 1.0, 0.0))

index_join_normal_sf = np.where(measureData_h30mT_tauQ3000.values[0:,2] >= zeroTol)[0][0]
print(index_join_normal_sf)
ax3.plot(measureData_h30mT_tauQ3000.values[:,0], np.gradient(np.concatenate((measureData_h30mT_tauQ3000.values[0:index_join_normal_sf,2], measureData_h30mT_tauQ3000.values[index_join_normal_sf:,4])), measureData_h30mT_tauQ3000.values[:,0]), linewidth=LineWidth, label=r'$\frac{d<\sqrt{A^{\dagger}A}>}{dt}\,,\tau_{Q}=3000t_{GL}}$', linestyle='solid', color=(1.0, 0, 0.0))

# index_join_normal_sf = np.where(measureData_h30mT_tauQ1850.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax3.plot(measureData_h30mT_tauQ1350.values[:,0], np.gradient(np.concatenate((measureData_h30mT_tauQ1850.values[0:index_join_normal_sf,2], measureData_h30mT_tauQ1850.values[index_join_normal_sf:,4])), measureData_h30mT_tauQ1850.values[:,0]), linewidth=LineWidth, label=r'$\frac{d<\sqrt{A^{\dagger}A}>}{dt}\,,\tau_{Q}=1850t_{GL}}$', linestyle='solid', color=(0.5, 0, 1.0))

# index_join_normal_sf = np.where(measureData_h30mT_tauQ1950.values[0:,2] >= zeroTol)[0][0]
# print(index_join_normal_sf)
# ax3.plot(measureData_h30mT_tauQ1950.values[:,0], np.gradient(np.concatenate((measureData_h30mT_tauQ1950.values[0:index_join_normal_sf,2], measureData_h30mT_tauQ1950.values[index_join_normal_sf:,4])), measureData_h30mT_tauQ1950.values[:,0]), linewidth=LineWidth, label=r'$\frac{d<\sqrt{A^{\dagger}A}>}{dt}\,,\tau_{Q}=1950t_{GL}}$', linestyle='solid', color=(0.7, 0.6, 0.0))

ax3.set_xlabel(r'$t/t^{0}_{GL}$',fontsize = 26.0)
ax3.set_ylabel(r'$\frac{d<\sqrt{A^{\dagger}A}>}{dt}/k_{B}T_{C}t^{-1}_{GL}$',fontsize = 26.0)
ax3.tick_params(axis='both', which='major', labelsize=30)
ax3.legend(prop={'size': 18}, bbox_to_anchor=(1.0, 1.0), loc='upper right')
ax3.grid(True)


plt.show()
